import os
from fastapi import FastAPI, HTTPException
import httpx
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
import uvicorn

app = FastAPI()

# NVD API endpoint
NVD_API_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0"

# Telegram bot token ve chat ID
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

bot = Bot(token=TELEGRAM_BOT_TOKEN)

# Endpoint to fetch CVEs from NVD API
async def fetch_cves(keyword: str):
    today = datetime.utcnow()
    one_day_ago = today - timedelta(days=2)
    params = {
        "keywordSearch": keyword,
        "resultsPerPage": 100,
        "startIndex": 0,
        "pubStartDate": one_day_ago.strftime('%Y-%m-%dT%H:%M:%S.%f')[:-3] + 'Z',
        "pubEndDate": today.strftime('%Y-%m-%dT%H:%M:%S.%f')[:-3] + 'Z'
    }
    async with httpx.AsyncClient() as client:
        response = await client.get(NVD_API_URL, params=params)
        response.raise_for_status()
        return response.json()

# Filter CVEs based on the keyword and severity
def filter_cves(cves, keyword):
    filtered = []
    for cve in cves:
        description = cve['cve']['descriptions'][0]['value']
        if keyword.lower() in description.lower():
            severity = cve.get('cve', {}).get('metrics', {}).get('cvssMetricV31', [{}])[0].get('cvssData', {}).get('baseSeverity', "")
            if severity in ['HIGH', 'CRITICAL']:
                filtered.append(cve)
    return filtered

# Endpoint to notify user via Telegram
async def notify_telegram(message: str):
    print(message)
    await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message)

# FastAPI route to search CVEs
@app.get("/search-cves/")
async def search_cves(keyword: str):
    try:
        data = await fetch_cves(keyword)
        cves = data.get("vulnerabilities", [])
        filtered_cves = filter_cves(cves, keyword)
        for cve in filtered_cves:
            description = cve['cve']['descriptions'][0]['value']
            cve_id = cve['cve']['id']
            severity = cve['cve']['metrics']['cvssMetricV31'][0]['cvssData']['baseSeverity']
            message = f"CVE ID: {cve_id}\nSeverity: {severity}\nDescription: {description}"
            await notify_telegram(message)
        return {"message": "Notifications sent", "count": len(filtered_cves)}
    except httpx.HTTPStatusError as exc:
        raise HTTPException(status_code=exc.response.status_code, detail=str(exc))
    except Exception as exc:
        raise HTTPException(status_code=500, detail=str(exc))

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
